name: Deploy

on:
  push:
    branches:
      - main
      - prod

jobs:
  test-lint:
    uses: ./.github/workflows/test-and-lint.yml
    name: Test and Lint
    secrets:
      DOCKERHUB_USER: ${{ vars.DOCKERHUB_USER }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  deploy:
    name: Deploy
    runs-on: ubuntu-22.04
    needs: [test-lint]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug Variables
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          echo "TF_VAR_MARQUEZ_API_APP: ${{ vars.TF_VAR_MARQUEZ_API_APP }}"
          echo "TF_VAR_MARQUEZ_WEB_APP: ${{ vars.TF_VAR_MARQUEZ_WEB_APP }}"
          env | sort

      - name: Push to ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws ecr get-login-password --region me-central-1 | docker login --username AWS --password-stdin ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.me-central-1.amazonaws.com
          docker build --compress -t ${{ vars.TF_VAR_MARQUEZ_API_APP }}:$GITHUB_SHA .
          docker push ${{ vars.TF_VAR_MARQUEZ_API_APP }}:$GITHUB_SHA
          docker build --compress -t ${{ vars.TF_VAR_MARQUEZ_WEB_APP }}:$GITHUB_SHA proxy/
          docker push ${{ vars.TF_VAR_MARQUEZ_WEB_APP }}:$GITHUB_SHA

      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ vars.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_db_password: ${{ secrets.TF_VAR_DB_PASSWORD }}
          TF_VAR_django_secret_key: ${{ secrets.TF_VAR_DJANGO_SECRET_KEY }}
          TF_VAR_marquez_api_app: ${{ vars.TF_VAR_MARQUEZ_API_APP }}:$GITHUB_SHA
          TF_VAR_marquez_web_app: ${{ vars.TF_VAR_MARQUEZ_WEB_APP }}:$GITHUB_SHA
          TF_WORKSPACE: ${{ github.ref == 'refs/heads/prod' && 'prod' || 'staging' }}
        run: |
          workspace=${{ github.ref == 'refs/heads/prod' && 'prod' || 'staging' }}
          echo "Using workspace: $workspace"
          echo "TF_WORKSPACE outside container: $TF_WORKSPACE"
          cd infra/
          docker compose run --rm --entrypoint /bin/sh terraform -c "cd setup; echo 'TF_WORKSPACE inside container (setup): \$TF_WORKSPACE'"
          docker compose run --rm terraform -chdir=setup init
          # Import existing resources to avoid recreation errors
          docker compose run --rm terraform -chdir=setup import aws_ecr_repository.marquez-api-app marquez-api-app || true
          docker compose run --rm terraform -chdir=setup import aws_ecr_repository.marquez-web-app marquez-web-app || true
          docker compose run --rm terraform -chdir=setup import aws_ecr_repository.pgadmin-app pgadmin-app || true
          docker compose run --rm terraform -chdir=setup import aws_iam_user.cd recipe-app-api-cd || true
          docker compose run --rm terraform -chdir=setup apply -auto-approve
          docker compose run --rm --entrypoint /bin/sh terraform -c "cd deploy; echo 'TF_WORKSPACE inside container (deploy): \$TF_WORKSPACE'"
          docker compose run --rm terraform -chdir=deploy init
          docker compose run --rm terraform -chdir=deploy workspace list
          docker compose run --rm terraform -chdir=deploy workspace select -or-create $workspace
          docker compose run --rm terraform -chdir=deploy apply -auto-approve
